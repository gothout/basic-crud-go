definitions:
  dto.ApplyPermissionBatchDTO:
    properties:
      codes:
        items:
          type: string
        minItems: 1
        type: array
      email:
        type: string
    required:
    - codes
    - email
    type: object
  dto.CreateEnterpriseDTO:
    properties:
      cnpj:
        type: string
      name:
        type: string
    required:
    - cnpj
    - name
    type: object
  dto.CreateEnterpriseResponse:
    properties:
      cnpj:
        type: string
      createdAt:
        type: string
      name:
        type: string
    type: object
  dto.CreateTokenAPIDto:
    properties:
      email:
        example: admin@test.com
        type: string
      expires:
        example: "2025-12-31T23:59:59Z"
        type: string
    required:
    - email
    - expires
    type: object
  dto.CreateTokenAPIResponse:
    properties:
      token:
        example: 645fe33b232a1b0c19f4e2bf1e475df2aa381cf45457ab6885cfb9c4bcd9e288
        type: string
    type: object
  dto.CreateUserDTO:
    properties:
      cnpj:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      number:
        type: string
      password:
        type: string
    required:
    - cnpj
    - email
    - first_name
    - last_name
    - number
    - password
    type: object
  dto.CreateUserResponse:
    properties:
      cnpj:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      number:
        type: string
    type: object
  dto.DeletePermissionPayload:
    properties:
      codes:
        items:
          type: string
        type: array
    required:
    - codes
    type: object
  dto.LoginUserDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginUserResponse:
    properties:
      permissions:
        $ref: '#/definitions/dto.ReadPermissionsResponse'
      token:
        type: string
      user:
        $ref: '#/definitions/dto.ReadUserResponse'
    type: object
  dto.LogoutUserDTO:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.ReadEnterpriseResponse:
    properties:
      cnpj:
        type: string
      createdAt:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  dto.ReadEnterprisesResponse:
    properties:
      enterprises:
        items:
          $ref: '#/definitions/dto.ReadEnterpriseResponse'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  dto.ReadPermissionResponse:
    properties:
      code:
        type: string
      description:
        type: string
    type: object
  dto.ReadPermissionsResponse:
    properties:
      permissions:
        items:
          $ref: '#/definitions/dto.ReadPermissionResponse'
        type: array
    type: object
  dto.ReadUserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      enterprise:
        $ref: '#/definitions/dto.ReadEnterpriseResponse'
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      number:
        type: string
      updated_at:
        type: string
    type: object
  dto.ReadUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/dto.ReadUserResponse'
        type: array
    type: object
  dto.RefreshTokenUserDTO:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.RefreshTokenUserResponse:
    properties:
      message:
        example: Token refreshed successfully
        type: string
    type: object
  dto.UpdateEnterpriseDTO:
    properties:
      cnpj:
        type: string
      newCnpj:
        type: string
      newName:
        type: string
    required:
    - cnpj
    type: object
  dto.UpdateEnterpriseResponse:
    properties:
      newCnpj:
        type: string
      newName:
        type: string
      oldCnpj:
        type: string
      updatedAt:
        type: string
    type: object
  dto.UpdateUserDTO:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      number:
        type: string
      password:
        type: string
    required:
    - email
    type: object
  dto.UpdateUserResponse:
    properties:
      updated:
        $ref: '#/definitions/dto.ReadUserResponse'
    type: object
  rest_err.Causes:
    properties:
      field:
        type: string
      message:
        type: string
    type: object
  rest_err.RestErr:
    properties:
      causes:
        items:
          $ref: '#/definitions/rest_err.Causes'
        type: array
      code:
        type: integer
      error:
        type: string
      message:
        type: string
    type: object
info:
  contact: {}
  description: Generic administrative API for a Basic Crud
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Basic CRUD API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return user data, token and permissions
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Login
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs user out of the system by invalidating their token
      parameters:
      - description: Logout request (only email)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LogoutUserDTO'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Reset token expiration if it's still valid
      parameters:
      - description: Refresh credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RefreshTokenUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Refresh token
      tags:
      - Auth
  /auth/token:
    post:
      consumes:
      - application/json
      description: Generates a new API token using a valid Bearer token and email
      parameters:
      - description: Token creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTokenAPIDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateTokenAPIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Generate API Token
      tags:
      - Auth
  /enterprise/v1/:
    post:
      consumes:
      - application/json
      description: Create enterprise by CNPJ and name
      parameters:
      - description: Company data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateEnterpriseDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateEnterpriseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Create enterprise
      tags:
      - Enterprise
    put:
      consumes:
      - application/json
      description: Update enterprise by CNPJ
      parameters:
      - description: Company data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateEnterpriseDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateEnterpriseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Update enterprise
      tags:
      - Enterprise
  /enterprise/v1/{cnpj}:
    delete:
      consumes:
      - application/json
      description: Delete an enterprise by CNPJ
      parameters:
      - description: CNPJ of the enterprise
        in: path
        name: cnpj
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Delete enterprise
      tags:
      - Enterprise
  /enterprise/v1/read:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of enterprises
      parameters:
      - description: Page number (min 1)
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadEnterprisesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: List enterprises
      tags:
      - Enterprise
  /enterprise/v1/read/{cnpj}:
    get:
      consumes:
      - application/json
      description: Read enterprise by CNPJ
      parameters:
      - description: CNPJ of the enterprise
        in: path
        name: cnpj
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadEnterpriseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Read enterprise
      tags:
      - Enterprise
  /permission/v1/:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of permissions names
      parameters:
      - description: Page number (min 1)
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadPermissionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Read permissions
      tags:
      - Permission
  /permission/v1/apply:
    post:
      consumes:
      - application/json
      description: Apply a batch of permissions to a user by email
      parameters:
      - description: Email and permission codes
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.ApplyPermissionBatchDTO'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Apply permissions to user
      tags:
      - Permission
  /permission/v1/read:
    get:
      consumes:
      - application/json
      description: Read permissions by full code name
      parameters:
      - description: Read code (min 4 characters)
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadPermissionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Read permission
      tags:
      - Permission
  /permission/v1/search:
    get:
      consumes:
      - application/json
      description: Search permissions by partial or full code name
      parameters:
      - description: Search query (min 4 characters)
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadPermissionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Search permissions
      tags:
      - Permission
  /permission/v1/user/{email}:
    delete:
      consumes:
      - application/json
      description: Remove a batch of permissions from a user by email
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      - description: Batch of permission codes to remove
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.DeletePermissionPayload'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Remove permissions from user
      tags:
      - Permission
    get:
      consumes:
      - application/json
      description: Read all permissions assigned to a user by email
      parameters:
      - in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadPermissionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Read user permissions
      tags:
      - Permission
  /user/v1/:
    post:
      consumes:
      - application/json
      description: Create user by CNPJ, name and email
      parameters:
      - description: User Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Create user
      tags:
      - User
  /user/v1/{email}:
    delete:
      consumes:
      - application/json
      description: Delete user by email
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Read user by email
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ReadUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Read user
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update user by email (URI param) and update fields from body
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - User
  /user/v1/read:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of users
      parameters:
      - description: Page number (min 1)
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - User
  /user/v1/read/enterprise:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of users
      parameters:
      - description: CNPJ enterprise
        in: query
        name: cnpj
        required: true
        type: string
      - description: Page number (min 1)
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - BearerAuth: []
      summary: List users by CNPJ
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: 'Enter the token in the format: Bearer <your_token>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
